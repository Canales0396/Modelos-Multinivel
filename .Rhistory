summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
source("Funciones/functions.R")
scale_mat = matrix(c(5,0.1,0.1,1),ncol = 2)
#scale_mat = 0.5*diag(2)
start = Sys.time()
post1 = sampling(y = y, scale = scale_mat, iter = 2000, thin = 1, h = 0.001, MALA = TRUE)
print( Sys.time() - start)
colnames(post1) = c("mu","sigma","acceptence_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
source("Funciones/functions.R")
scale_mat = matrix(c(5,0.1,0.1,2),ncol = 2)
#scale_mat = 0.5*diag(2)
start = Sys.time()
post1 = sampling(y = y, scale = scale_mat, iter = 2000, thin = 1, h = 0.001, MALA = TRUE)
print( Sys.time() - start)
colnames(post1) = c("mu","sigma","acceptence_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
source("Funciones/functions.R")
scale_mat = matrix(c(5,0.1,0.1,2),ncol = 2)
#scale_mat = 0.5*diag(2)
start = Sys.time()
post1 = sampling(y = y, scale = scale_mat, iter = 2000, thin = 1, h = 0.001, MALA = FALSE)
print( Sys.time() - start)
colnames(post1) = c("mu","sigma","acceptence_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
source("Funciones/functions.R")
scale_mat = matrix(c(5,0.1,0.1,2),ncol = 2)
#scale_mat = 0.5*diag(2)
start = Sys.time()
post1 = sampling(y = y, scale = scale_mat, iter = 2000, thin = 1, h = 0.01, MALA = FALSE)
print( Sys.time() - start)
colnames(post1) = c("mu","sigma","acceptence_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
source("Funciones/functions.R")
scale_mat = matrix(c(5,0.1,0.1,2),ncol = 2)
#scale_mat = 0.5*diag(2)
start = Sys.time()
post1 = sampling(y = y, scale = scale_mat, iter = 2000, thin = 1, h = 0.01, MALA = TRUE)
print( Sys.time() - start)
colnames(post1) = c("mu","sigma","acceptence_rate",".chain")
post1_df = as_draws_df(post1)
summarise_draws(post1_df)
mcmc_combo(post1_df,pars = c("mu","sigma"))
rm(list = ls())
load("~/Documents/Gasto Turismo/Borradores/Gasto.Rdata")
View(EGPV2016)
table(EGPV2016$TipVisitante)
table(EGPV2016$RegRes)
View(ER)
rm(list = ls())
load("~/Documents/Gasto Turismo/Gasto.Rdata")
View(EGPV2016)
View(ER)
5700*4
(5700*4)/550
(8600*4)/550
7*38
rm(list = ls())
library(bayesplot)
library(cmdstanr)
library(posterior)
install.packages("bayesplot")
library(bayesplot)
library(cmdstanr)
library(posterior)
dat_gen = function(N = 32,beta = 1,K = 4,alphaj = rnorm(K),seed  = NULL){
if (!is.null(seed))
set.seed(seed)
g =  rep(1:K,N/K)
# Generating the hierarchical model
x = rnorm(N)
y = rnorm(N, beta + alphaj + x, 1)
df = data.frame(g = g,x = x,y = y)
return(df)
}
setwd("/Users/asael_am/Documents/Modelos-Multinivel/Stancodes")
sm1 <- cmdstan_model("multi_level.stan")
dat_gen = function(N = 32,beta = rnorm(1),K = 4,alphaj = rnorm(K),seed  = NULL){
if (!is.null(seed))
set.seed(seed)
g =  rep(1:K,N/K)
# Generating the hierarchical model
x = rnorm(N)
y = rnorm(N, beta + alphaj + x, 1)
df = data.frame(g = g,x = x,y = y)
return(df)
}
d1= dat_gen(N = 200)
dat_gen = function(N = 32,beta = rnorm(1),K = 4,alphaj = rnorm(K),seed  = NULL){
if (!is.null(seed))
set.seed(seed)
g =  rep(1:K,N/K)
# Generating the hierarchical model
x = rnorm(N)
y = rnorm(N, beta + alphaj, 1)
df = data.frame(g = g,x = x,y = y)
return(df)
}
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
max_treedepth = 12, refresh = 500, iter_sampling = 1000,
iter_warmup = 1000,adapt_delta = 0.9)
fit
sm1 <- cmdstan_model("multi_level.stan")
sm1 <- cmdstan_model("multi_level.stan")
sm1 <- cmdstan_model("multi_level.stan")
rm(sm1)
sm1 <- cmdstan_model("multi_level.stan")
library(bayesplot)
library(cmdstanr)
library(posterior)
dat_gen = function(N = 32,beta = rnorm(1),K = 4,alphaj = rnorm(K),seed  = NULL){
if (!is.null(seed))
set.seed(seed)
g =  rep(1:K,N/K)
# Generating the hierarchical model
x = rnorm(N)
y = rnorm(N, beta + alphaj, 1)
df = data.frame(g = g,x = x,y = y)
return(df)
}
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
dat_gen = function(N = 32,beta = rnorm(1),K = 4,alphaj = rnorm(K),seed  = NULL){
if (!is.null(seed))
set.seed(seed)
g =  rep(1:K,N/K)
# Generating the hierarchical model
x = rnorm(N)
y = rnorm(N, beta + alphaj, 1)
df = data.frame(g = g,x = x,y = y)
return(df)
}
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
max_treedepth = 12, refresh = 500, iter_sampling = 1000,
iter_warmup = 1000,adapt_delta = 0.9)
fit
library(bayesplot)
library(cmdstanr)
library(posterior)
dat_gen = function(N = 32,beta = rnorm(1),K = 4,alphaj = rnorm(K),seed  = NULL){
if (!is.null(seed))
set.seed(seed)
g =  rep(1:K,N/K)
# Generating the hierarchical model
x = rnorm(N)
y = rnorm(N, beta + alphaj, 1)
df = data.frame(g = g,x = x,y = y)
return(df)
}
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
max_treedepth = 12, refresh = 500, iter_sampling = 1000,
iter_warmup = 1000,adapt_delta = 0.9)
fit
rm(list = ls9)
rm(list = ls())
library(bayesplot)
library(cmdstanr)
library(posterior)
dat_gen = function(N = 32,beta = rnorm(1),K = 4,alphaj = rnorm(K),seed  = NULL){
if (!is.null(seed))
set.seed(seed)
g =  rep(1:K,N/K)
# Generating the hierarchical model
x = rnorm(N)
y = rnorm(N, beta + alphaj, 1)
df = data.frame(g = g,x = x,y = y)
return(df)
}
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
max_treedepth = 12, refresh = 500, iter_sampling = 1000,
iter_warmup = 1000,adapt_delta = 0.9)
fit
dat_gen = function(N = 32,beta = rnorm(1),K = 4,alphaj = rnorm(K),seed  = NULL){
if (!is.null(seed))
set.seed(seed)
g =  rep(1:K,N/K)
# Generating the hierarchical model
x = rnorm(N)
y = rnorm(N, beta + alphaj, 1)
df = data.frame(g = g,x = x,y = y)
return(df)
}
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
max_treedepth = 12, refresh = 500, iter_sampling = 1000,
iter_warmup = 1000,adapt_delta = 0.9)
fit
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
max_treedepth = 12, refresh = 500, iter_sampling = 1000,
iter_warmup = 1000,adapt_delta = 0.9)
fit
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200,beta = 0)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
sm1 <- cmdstan_model("multi_level.stan")
d1 = dat_gen(N = 200,beta = 0)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
alpha =rnorm(4)
alpha
sm1 <- cmdstan_model("multi_level.stan")
alpha = rnorm(4)
d1 = dat_gen(N = 200,beta = 0,alphaj = alpha)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
alpha
sm1 <- cmdstan_model("multi_level.stan")
alpha = rnorm(4)
d1 = dat_gen(N = 200,beta = 0,alphaj = alpha)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4)
fit
alpha
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
iter_sampling = 3000, iter_warmup = 2000)
fit
alpha
sm1 <- cmdstan_model("multi_level.stan")
alpha = rnorm(4)
d1 = dat_gen(N = 200,beta = 0,alphaj = alpha)
d1 = list(n = 200, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
iter_sampling = 3000, iter_warmup = 2000)
fit
alpha
alpha = rnorm(4)
d1 = dat_gen(N = 800,beta = 0,alphaj = alpha)
d1 = list(n = 800, J = 4, group = d1$g, y = d1$y)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
iter_sampling = 3000, iter_warmup = 2000)
fit
alpha
rm(list = ls())
## Limpieza de la base datos EGYPV2016Turistas
library(haven)
library(foreign)
EGYPV2016Turistas <- read.spss("EGYPV 2016 F01 - Turistas.sav")
EGYPV2016Turistas <- data.frame(EGYPV2016Turistas)
setwd("/Users/asael_am/Documents/Modelos-Multinivel")
EGYPV2016Turistas <- read.spss("EGYPV 2016 F01 - Turistas.sav")
EGYPV2016Turistas <- data.frame(EGYPV2016Turistas)
EGYPV2016TN <- subset(EGYPV2016Turistas, select = c(Validas, TipViajero, TipVisitante, Mes, CodRes, RegRes, CodPrimVisita,P29_Mu4,
GruViaje, P10_3NumNoch, Pernocto, GruNoch, P11_THoteles, P11_TAmigos,
P11_TAlojP, CodTipMot, CodModViaje, P28_Total, CodEstCivil, P9_GruViaje,
P10_Pernocto, GastoTotalXPers, GastoFin, GastoTotalXPersXDia, Ciudad1, Zona1))
## Filtrado solo para los datos de Gasto y Perfil
EGYPV2016TNF <- subset(EGYPV2016TN,Validas == "Gasto y Perfil")
## Conversión del Gasto Fin a escala Logarítmica
GastoFinN = EGYPV2016TNF$GastoFin
LogGFN = log(GastoFinN)
is.na(LogGFN)
LogGFN = na.exclude(log(GastoFinN))
any(is.na(LogGFN))
## Gráficos de las densidades para GastoFinN y LogGFN
library(ggplot2)
gleves = EGYPV2016TNF$CodPrimVisita
glvels
glevels = EGYPV2016TNF$CodPrimVisita
glvels
glevels
glevels = EGYPV2016TNF$Zona1
glevels
levels(glevels)
glevels = factor(glevels)
glevels
levels(glevels)
glevels = factor(EGYPV2016TNF$Zona1,levels = 1:7,
labels = c("Zona Centro","Zona Insular","Zona Norte","Zona Occidental","Zona Oriental",
"Zona Sur","Desconocido"))
glevels
?match
?replace()
glevels = factor(EGYPV2016TNF$Zona1)
glevels
levels(glevels)
labels(glevels)
value(glevels)
values(glevels)
glevels
?factor()
as.numeric(glevels)
rm(gleves)
sm2 <- cmdstan_model("skew_normal.stan")
sm1 <- cmdstan_model("Stancodes/multi_level.stan")
sm2 <- cmdstan_model("Stancodes/skew_normal.stan")
sm2 <- cmdstan_model("Stancodes/skew_normal.stan")
labels(glevels)
unique(glevels)
length(unique(glevels))
is.na(log(GastoFinN))
glevels = as.numeric(glevels[!is.na(log(GastoFinN))])
LogGFN = na.exclude(log(GastoFinN))
d1 = list(n = length(LogGFN), J = 7, group = glevels, y = LogGFN)
fit <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,
iter_sampling = 3000, iter_warmup = 2000)
fit
# Compilar el codigo Stan del modelo multinivel
sm1 <- cmdstan_model("Stancodes/multi_level.stan")
# La lista de datos que Stan necesita para hacer mcmc
d1 = list(n = length(LogGFN), J = 7, group = glevels, y = LogGFN)
# mcmc para modelo multinivel
fit1 <- sm1$sample(data = d1, chains = 4, parallel_chains = 4,refresh = 500)
fit1
# mcmc para modelo de Gomez
fit2 <- sm2$sample(data = d1, chains = 4, parallel_chains = 4,refresh = 500)
fit2
# mcmc para modelo multinivel
fit1 <- sm1$sample(data = d1, chains = 4, parallel_chains = 4, iter_sampling = 2000,
refresh = 500)
fit1
# mcmc para modelo multinivel
fit1 <- sm1$sample(data = d1, chains = 4, parallel_chains = 4, iter_sampling = 3000,
refresh = 500)
# Compilar el codigo Stan del modelo multinivel
sm1 <- cmdstan_model("Stancodes/multi_level.stan")
# mcmc para modelo multinivel
fit1 <- sm1$sample(data = d1, chains = 4, parallel_chains = 4, iter_sampling = 3000,
refresh = 500)
fit1
# Compilar el codigo Stan del modelo multinivel
sm1 <- cmdstan_model("Stancodes/multi_level.stan")
# mcmc para modelo multinivel
fit1 <- sm1$sample(data = d1, chains = 4, parallel_chains = 4, iter_sampling = 3000,
refresh = 500)
fit1
# mcmc para modelo de Gomez
fit2 <- sm2$sample(data = d1, chains = 4, parallel_chains = 4,refresh = 500)
fit2
fit1
fit1$draws(variables = c("mu_group","sigma"),format = "matrix")
fv1 = fit1$draws(variables = c("mu_group","sigma"),format = "matrix")
summarize_draws(fv1)
colnames(fv1)
levels(glevels)
glevels = factor(EGYPV2016TNF$Zona1)
gl = as.numeric(glevels[!is.na(log(GastoFinN))])
levels(gl)
labels(gl)
levelss(gl)
levels(gl)
gl
levels(glevels)
colnames(fv1) = c(levels(glevels),'sigma')
# resumen de las cadenas
summarize_draws(fv1)
mcmc_combo(fv1)
mcmc_combo(fv1[,1:4])
mcmc_combo(fv1[,5:8])
# posterior predictive checks
y_r1 = fit1$draws(variables = "y_rep",format = "matrix")
ppc_dens_overlay(y = LogGFN,yrep = y_r1)
class(LogGFN)
class(y_r1)
ppc_dens_overlay(y = LogGFN,yrep = as.matrix(y_r1))
as.matrix(y_r1)
class(as.matrix(y_r1))
dim(y_r1)
length(LogGFN)
ppc_dens_overlay(y = LogGFN,yrep = as.matrix(y_r1))
ppc_dens_overlay(y = LogGFN,yrep = y_r1)
ppc_dens_overlay(y = LogGFN,yrep = y_r1)
# posterior predictive checks
ll1 = fit1$draws(variables = "log_lik",format = "matrix")
library(loo)
loo(ll1)
# posterior predictive checks
ll1 = fit1$draws(variables = "log_lik",format = "matrix")
r_eff1 = loo::relative_eff(x = exp(ll1), cores = 4)
loo1 = loo::loo.array(LLarray,
r_eff = r_eff1,
cores = 4,
save_psis = save_psis)
loo1 = loo(ll1)
loo1
# Leave one out modelo Gomez
ll2 = fit2$draws(variables = "log_lik",format = "matrix")
loo2 = loo(ll2)
loo_compare(loo1,loo2)
summary(loo_compare(loo1,loo2))
loo_compare(loo1,loo2)
loo1
loo2
comp = loo_compare(loo1,loo2)
print(comp)
print(comp,simplify = FALSE, digits = 3)
install.packages("xtable")
library(xtable)
glevels
levels
gl
unique(gl)
unique(glevels)
# mcmc para modelo multinivel
fit1 <- sm1$sample(data = d1, chains = 4, parallel_chains = 4, refresh = 500)
fit1
# extraer las cadenas de las variables importantes
fv1 = fit1$draws(variables = c("mu_group","sigma"),format = "matrix")
colnames(fv1) = c(levels(glevels),'sigma')
# resumen de las cadenas
summarize_draws(fv1)
# graficos de las posteriors
mcmc_combo(fv1[,1:4])
mcmc_combo(fv1[,5:8])
# Leave one out modelo multinivel
ll1 = fit1$draws(variables = "log_lik",format = "matrix")
loo1 = loo(ll1)
# Leave one out modelo Gomez
ll2 = fit2$draws(variables = "log_lik",format = "matrix")
loo2 = loo(ll2)
comp = loo_compare(loo1,loo2)
print(comp,simplify = FALSE, digits = 3)
xtalbe(summarize_draws(fv1))
xtable(summarize_draws(fv1))
library(ggplot2)
library(ggplot2)
library(cowplot)
# graficos de las posteriors
mcmc_combo(fv1[,1:4])+theme_bw()
cowplot::plot_grid(g1,g2,ncol = 2)
# graficos de las posteriors
g1 = mcmc_combo(fv1[,1:4])
g2 = mcmc_combo(fv1[,5:8])
cowplot::plot_grid(g1,g2,ncol = 2)
# graficos de las posteriors
g1 = mcmc_combo(fv1[,1:4]) + theme(legend.position="bottom",
legend.title=element_blank())
g1
# graficos de las posteriors
g1 = mcmc_combo(fv1[,1:4],gg_theme = theme(legend.position="bottom",
legend.title=element_blank())
)
g1
# graficos de las posteriors
g1 = mcmc_combo(fv1[,1:4])
legend <- get_legend(
# create some space to the left of the legend
p1 + theme(legend.box.margin = margin(0, 0, 0, 12))
)
legend <- get_legend(
# create some space to the left of the legend
g1 + theme(legend.box.margin = margin(0, 0, 0, 12))
)
g1 = mcmc_combo(fv1[,1:4]) + + theme(legend.position="none")
g1 = mcmc_combo(fv1[,1:4]) + theme(legend.position="none")
g1
g1 = mcmc_combo(fv1[,1:4],gg_theme =  theme(legend.position="none"))
g1
g1 = mcmc_combo(fv1[,1:4],gg_theme = theme(legend.position="none"))
g2 = mcmc_combo(fv1[,5:8],gg_theme = theme(legend.position="none"))
cowplot::plot_grid(g1,g2,legend, ncol = 3)
cowplot::plot_grid(g1,g2,ncol = 2)
g1 = mcmc_combo(fv1[,1:4],gg_theme = theme(legend.position="none"))
g2 = mcmc_combo(fv1[,5:8])
cowplot::plot_grid(g1,g2,ncol = 2)
cowplot::plot_grid(g1,g2,ncol = 2,rel_widths = c(1, 1.5))
cowplot::plot_grid(g1,g2,ncol = 2,rel_widths = c(1, 1.3))
cowplot::plot_grid(g1,g2,ncol = 2,rel_widths = c(1, 1.2))
fit2
xtable(print(comp,simplify = FALSE, digits = 2))
